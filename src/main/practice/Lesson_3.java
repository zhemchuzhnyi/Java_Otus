package practice;

// Ветвления \ Циклы \ Функции

public class Lesson_3 {
    public static void main(String[] args) {

        // Константы
        // значения которые не меняются после их инициализации
        // позволяют создать именнованые значения - которые остаются фиксированными в течении выполнения программы
        final int SIZE = 10;
        //SIZE = 15;

        //Массивы
        /* Массив - упорядоченный набор элементов, каждый из которых хранит одно значение
        Например Шкаф - это массив
        ящики в шкафу - это индексы
        содержимое ящиков - эелементы массива
         */
        int numbers[]; // тип данных - название массива[]
        int[] numbers1; // тип данных[] название массива;

        String numbers2[];
        String[] numbers3;

        // Создание массивов и инициализация
        int[] numbers4;
        numbers4 = new int[6];
        int[] numbers5= new int[6];

        // Заполнение массивов
        int[] numbers6 = new int[3];

        numbers6[0] = 42;
        numbers6[1] = 14;
        numbers6[2] = 15;

        int[] numbers7 = new int[] {42,14,15}; // получение данных о размере
        int[] numbers8 = {42,14,15}; // numbers.length - размер массива

        // получение данных
        int[] numbers9 = {42,14,15};
        System.out.println(numbers9[2]);
        /* Преимущества - быстрая скорость доступа к элементу
        оптимальное хранение примитивов

        Недостатки
        фиксированная длина - обьявляется при инициализации и не может быть изменена после
        используется int  в качестве индекса
        не может содержать более 2^31 - 1 элементоа
        Невозможно создать изменяемый массив
         */

        /* IF
        используется для создания условных операторов
        выполняет определенный блок кода - если условие после if истинно
        если ложно - код внутри блока не будет выполнен
        if (правда) - делаем что-то
         */

        int num = 10;
        if(num > 0) System.out.println("Больше 0");
        System.out.println(("Всегда напечатаю"));

        // IF - ELSE
        int num2 = 10;
        if (num2 > 0) {
            System.out.println("Больше 0");
        }else{
            System.out.println("Меньше 0");
        }
        System.out.println("Всегда напечатаю");

        /* Тернарный оператор
        -условие- -значение если истинно- : -значение если ложно-
         */
        int num3 = 10;
        if (num3 > 0) {
            System.out.println("Больше 0");
        }else{
            System.out.println("Меньше 0");
        }
        System.out.println("Всегда напечатаю");

        int num4 = 10;
        boolean x = num4 > 0;
        String message = x? "Больше 0" : "Меньше 0";
        System.out.println(message);

        //Циклы
        /* циклы используются для многократного выполнения одного и того же блока кода до тех пор,
        пока выполняется определённое условие.

        for	([инициализация	счетчика];
        [условие	выхода]и	[изменение	счетчика]){ // действия
        }
        int[] numbers = {3, 5 , 6 ,12};

        for
        (int i = 0; // Счетчик
        i <numbers.length; // Условие
        i++) // Изменение счетчика
        {System.out.println(numbers[i]);}
         */

        //Цикл for - each
        /* for	(тип	и	название:	название	массива/коллекции)	{
        // действия, которые	выполняются}

        int[] numbers = {1, 3 ,54, 67 ,89, 2};
        for (int d: numbers){  System.out.println(d);
        }
         */

        //While
        /* while - логическое выражение
        {
        // операторы
        }
        int cash = 100;
        while (cash > 0) {
        System.out.println("Купил что то очень нужное");
        cash = cash - 20;
        }
         */

        // Цикл do - while
        /*
        do
        {
        // операторы
        } while (логическое выражение)

        int cash = 100;
        do {
        System.out.println("Купил что-то очень нужное 2");
        cash = cash - 20;
        } while (cash > 0);
         */

        /*
        Рекурсия
        Рекурсия — это техника программирования, при которой метод вызывает сам себя для решения задачи.
        компоненты рекурсии:
        Базовый случай (условие завершения): Условие, при котором рекурсивные вызовы прекращаются.
        Рекурсивный случай: Вызов метода самим собой с изменёнными параметрами.
         */

        /*public static void countDown(int n) {
            if (n == 0) { // Базовый случай: если n равно 0
                System.out.println("Готово");
        }else{
                System.out.println(n);
                countDown(n - 1); // Рекурсивный вызов с n - 1
            }
            public static void main (String[] args) {
                countDown(5); // запуск с числа 5
            }
         */
    }
}
